apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'org.jetbrains.kotlin.kapt'

android {
  compileSdkVersion versions.compileSdk
  defaultConfig {
    applicationId red.applicationId
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionCode Integer.parseInt(System.getenv('CIRCLE_BUILD_NUM') ?: "153")
    versionName red.versionName
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    vectorDrawables {
      useSupportLibrary true
    }
  }

  signingConfigs {
    release {
      storeFile rootProject.file(System.getenv('KEYSTORE') ?: KEYSTORE)
      storePassword System.getenv('KEYSTORE_PASSWORD') ?: KEYSTORE_PASSWORD
      keyAlias System.getenv('KEY_ALIAS') ?: KEY_ALIAS
      keyPassword System.getenv('KEY_PASSWORD') ?: KEY_PASSWORD
    }
  }

  buildTypes {
    release {
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
      minifyEnabled false
    }
  }

  dataBinding {
    enabled true
  }

  compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
  }

  dexOptions {
    preDexLibraries = Boolean.valueOf(System.getProperty('pre-dex', 'true'))
  }

  flavorDimensions 'foot'
  productFlavors {
    prod {}
  }

  // Always show the result of every unit test, even if it passes.
  testOptions {
    unitTests {
      all {
        testLogging {
          events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
      }
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }

  lintOptions {
    warning 'InvalidPackage' // prevent error from references of non-Android package
  }

  sourceSets {
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
  }
}

dependencies {
  implementation deps.kotlin.stdlib.jdk8
  implementation deps.androidx.lifecycle.extensions
  kapt deps.androidx.lifecycle.compiler
  implementation deps.androidx.appCompat
  implementation deps.androidx.annotations
  implementation deps.androidx.design
  implementation deps.androidx.recyclerView
  implementation deps.androidx.legacy
  implementation deps.androidx.cardView
  implementation deps.androidx.constraintLayout
  implementation deps.timber
  implementation deps.rx2.core
  implementation deps.rx2.kotlin
  implementation deps.rx2.android
  implementation deps.picasso.core
  implementation deps.picasso.okhttp3
  implementation deps.okhttp.core
  implementation deps.okhttp.loggingInterceptor
  implementation deps.retrofit.core
  implementation deps.retrofit.moshi
  implementation deps.retrofit.rx2
  implementation deps.moshi.core
  implementation deps.moshi.adapters
  kapt deps.moshi.kotlin
  implementation deps.rx2.binding
  implementation deps.rx2.bindingRecyclerView
  implementation deps.rx2.bindingAppCompat
  implementation deps.rx2.bindingSupport
  implementation deps.rx2.dataBinding
  kapt deps.androidx.dataBindingCompiler
  implementation deps.dagger.runtime
  implementation deps.dagger.android
  implementation deps.dagger.androidSupport

  implementation deps.androidx.ktx
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
  resolutionStrategy.force "com.google.code.findbugs:jsr305:$versions.jsr305"

  resolutionStrategy {
    eachDependency { details ->
      // Force all of the primary support libraries to use the same version.
      if (details.requested.group == 'com.android.support') {
        details.useVersion versions.supportLibrary
      }
    }
  }
}
